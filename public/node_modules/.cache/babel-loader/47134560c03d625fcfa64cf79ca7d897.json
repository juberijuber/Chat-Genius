{"ast":null,"code":"import _taggedTemplateLiteral from \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Projects\\\\chat-genius-React\\\\public\\\\src\\\\components\\\\ChatContainer.jsx\",\n    _templateObject;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport { sendMessageRoute, recieveMessageRoute } from \"../utils/APIRoutes\";\nimport Modal from \"./Modal\";\nexport default function ChatContainer(_ref) {\n  var _this = this;\n\n  var currentChat = _ref.currentChat,\n      socket = _ref.socket;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var scrollRef = useRef();\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      arrivalMessage = _useState4[0],\n      setArrivalMessage = _useState4[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var data, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\n\n        case 2:\n          data = _context.sent;\n          _context.next = 5;\n          return axios.post(recieveMessageRoute, {\n            from: data._id,\n            to: currentChat._id\n          });\n\n        case 5:\n          response = _context.sent;\n          setMessages(response.data);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  })), [currentChat]);\n  useEffect(function () {\n    var getCurrentChat = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!currentChat) {\n                _context2.next = 3;\n                break;\n              }\n\n              _context2.next = 3;\n              return JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY))._id;\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function getCurrentChat() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    getCurrentChat();\n  }, [currentChat]);\n\n  var handleSendMsg = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(msg) {\n      var data, msgs;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\n\n          case 2:\n            data = _context3.sent;\n            socket.current.emit(\"send-msg\", {\n              to: currentChat._id,\n              from: data._id,\n              msg: msg\n            });\n            _context3.next = 6;\n            return axios.post(sendMessageRoute, {\n              from: data._id,\n              to: currentChat._id,\n              message: msg\n            });\n\n          case 6:\n            msgs = _toConsumableArray(messages);\n            msgs.push({\n              fromSelf: true,\n              message: msg\n            });\n            setMessages(msgs);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n\n    return function handleSendMsg(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (socket.current) {\n      socket.current.on(\"msg-recieve\", function (msg) {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg\n        });\n      });\n    }\n  }, []);\n  useEffect(function () {\n    arrivalMessage && setMessages(function (prev) {\n      return [].concat(_toConsumableArray(prev), [arrivalMessage]);\n    });\n  }, [arrivalMessage]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"data:image/svg+xml;base64,\".concat(currentChat.avatarImage),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, currentChat.username))), /*#__PURE__*/React.createElement(Logout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, messages.map(function (message) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: scrollRef,\n      key: uuidv4(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message \".concat(message.fromSelf ? \"sended\" : \"recieved\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content \",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }, message.message))));\n  })), /*#__PURE__*/React.createElement(ChatInput, {\n    handleSendMsg: handleSendMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n}\nvar Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-rows: 10% 80% 10%;\\n  gap: 0.1rem;\\n  overflow: hidden;\\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\\n    grid-template-rows: 15% 70% 15%;\\n  }\\n  .chat-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 0 2rem;\\n    .user-details {\\n      display: flex;\\n      align-items: center;\\n      gap: 1rem;\\n      .avatar {\\n        img {\\n          height: 3rem;\\n        }\\n      }\\n      .username {\\n        h3 {\\n          color: white;\\n        }\\n      }\\n    }\\n  }\\n  .chat-messages {\\n    padding: 1rem 2rem;\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    overflow: auto;\\n    &::-webkit-scrollbar {\\n      width: 0.2rem;\\n      &-thumb {\\n        background-color: #ffffff39;\\n        width: 0.1rem;\\n        border-radius: 1rem;\\n      }\\n    }\\n    .message {\\n      display: flex;\\n      align-items: center;\\n      .content {\\n        max-width: 40%;\\n        overflow-wrap: break-word;\\n        padding: 1rem;\\n        font-size: 1.1rem;\\n        border-radius: 1rem;\\n        color: #d1d1d1;\\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\\n          max-width: 70%;\\n        }\\n      }\\n    }\\n    .sended {\\n      justify-content: flex-end;\\n      .content {\\n        background-color: #4f04ff21;\\n      }\\n    }\\n    .recieved {\\n      justify-content: flex-start;\\n      .content {\\n        background-color: #9900ff20;\\n      }\\n    }\\n  }\\n\"])));","map":{"version":3,"sources":["D:/Projects/chat-genius-React/public/src/components/ChatContainer.jsx"],"names":["React","useState","useEffect","useRef","styled","ChatInput","Logout","v4","uuidv4","axios","sendMessageRoute","recieveMessageRoute","Modal","ChatContainer","currentChat","socket","messages","setMessages","scrollRef","arrivalMessage","setArrivalMessage","JSON","parse","localStorage","getItem","process","env","REACT_APP_LOCALHOST_KEY","data","post","from","_id","to","response","getCurrentChat","handleSendMsg","msg","current","emit","message","msgs","push","fromSelf","on","prev","avatarImage","username","map","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Logout from \"./Logout\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"axios\";\r\nimport { sendMessageRoute, recieveMessageRoute } from \"../utils/APIRoutes\";\r\nimport Modal from \"./Modal\"\r\n\r\nexport default function ChatContainer({ currentChat, socket }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const scrollRef = useRef();\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    const data = await JSON.parse(\r\n      localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n    );\r\n    const response = await axios.post(recieveMessageRoute, {\r\n      from: data._id,\r\n      to: currentChat._id,\r\n    });\r\n    setMessages(response.data);\r\n  }, [currentChat]);\r\n\r\n  useEffect(() => {\r\n    const getCurrentChat = async () => {\r\n      if (currentChat) {\r\n        await JSON.parse(\r\n          localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n        )._id;\r\n      }\r\n    };\r\n    getCurrentChat();\r\n  }, [currentChat]);\r\n\r\n  const handleSendMsg = async (msg) => {\r\n    const data = await JSON.parse(\r\n      localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n    );\r\n    socket.current.emit(\"send-msg\", {\r\n      to: currentChat._id,\r\n      from: data._id,\r\n      msg,\r\n    });\r\n    await axios.post(sendMessageRoute, {\r\n      from: data._id,\r\n      to: currentChat._id,\r\n      message: msg,\r\n    });\r\n\r\n    const msgs = [...messages];\r\n    msgs.push({ fromSelf: true, message: msg });\r\n    setMessages(msgs);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\"msg-recieve\", (msg) => {\r\n        setArrivalMessage({ fromSelf: false, message: msg });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    arrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\r\n  }, [arrivalMessage]);\r\n\r\n \r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"chat-header\">\r\n        <div className=\"user-details\">\r\n          <div className=\"avatar\">\r\n            <img\r\n              src={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"username\">\r\n            <h3>{currentChat.username}</h3>\r\n          </div>\r\n        </div>\r\n        <Logout />\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => {\r\n          return (\r\n            <div ref={scrollRef} key={uuidv4()}>\r\n              <div\r\n                className={`message ${\r\n                  message.fromSelf ? \"sended\" : \"recieved\"\r\n                }`}\r\n              >\r\n                <div className=\"content \">\r\n                  <p>{message.message}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <ChatInput handleSendMsg={handleSendMsg} />\r\n      <Modal/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 10% 80% 10%;\r\n  gap: 0.1rem;\r\n  overflow: hidden;\r\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n    grid-template-rows: 15% 70% 15%;\r\n  }\r\n  .chat-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 2rem;\r\n    .user-details {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .chat-messages {\r\n    padding: 1rem 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    overflow: auto;\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .message {\r\n      display: flex;\r\n      align-items: center;\r\n      .content {\r\n        max-width: 40%;\r\n        overflow-wrap: break-word;\r\n        padding: 1rem;\r\n        font-size: 1.1rem;\r\n        border-radius: 1rem;\r\n        color: #d1d1d1;\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n          max-width: 70%;\r\n        }\r\n      }\r\n    }\r\n    .sended {\r\n      justify-content: flex-end;\r\n      .content {\r\n        background-color: #4f04ff21;\r\n      }\r\n    }\r\n    .recieved {\r\n      justify-content: flex-start;\r\n      .content {\r\n        background-color: #9900ff20;\r\n      }\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}